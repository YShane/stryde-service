####### Application Prop ##################################
## custom oauth2 infos
oauth2.stryde.client-id=stryde-client-Id
oauth2.stryde.client-secret=stryde-client-secret
oauth2.stryde.resource-id=stryde-resource-Id
oauth2.stryde.scope=stryde

## url of this server
base.url=http://localhost:8900
## app url
app.url=http://localhost:4200
## jwt password
app.jwt.signingkey=ef@j'Ak%PKumkQ2v
######################################################
## API server configuration
server.port=8900
server.servlet.contextPath=/api
security.basic.enabled=false
######################################################
## Application info
info.app.name=@project.name@
info.app.groupId = @project.groupId@
info.app.artifactId = @project.artifactId@
info.app.version = @project.version@
info.app.description=Endpoints of Stryde
######################################################
## Database
## to change the order of oauth2 filter !!! important
security.oauth2.resource.filter-order = 3

## local-dev-db
spring.datasource.url=jdbc:mysql://localhost:3306/stryde
spring.datasource.username=root
spring.datasource.password=

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.testWhileIdle = true
spring.datasource.timeBetweenEvictionRunsMillis = 60000
spring.datasource.validationQuery = SELECT 1

## Hibernate ddl auto options
# create: create the schema, the data previously present (if there) in the schema is lost
# update: update the schema with the given values.
# validate: validate the schema. It makes no change in the DB.
# create-drop: create the schema with destroying the data previously present(if there). It also drop the database schema when the SessionFactory is closed.
# TURN OFF IN PRODUCTION ENV
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

## show sql
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.properties.hibernate.sql=debug

## Spring datasource initialization setting
# it will try to initialize datasource by looking for schema.sql or data.sql in the classpath
# TURN OFF IN PRODUCTION ENV
spring.datasource.initialize=true

## Json serialization will use ISO format, not long milis
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
######################################################
## Email setting
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=evms.noreply@gmail.com
spring.mail.password=z=5'W9$b2`e5$G&:
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#defaults timeouts are infinite
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000
#debug=true

#controller exception handling
#throws an exception if no handler is found
spring.mvc.throw-exception-if-no-handler-found=true
#resource mappings off
spring.resources.add-mappings=false